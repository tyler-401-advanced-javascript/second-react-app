{"version":3,"sources":["components/Form/index.js","components/Results/index.js","components/Header/index.js","components/App/index.js","components/About/index.js","components/Contact/index.js","components/Navbar/index.js","components/Router/index.js","serviceWorker.js","index.js"],"names":["ContentType","Form","handleSubmit","e","a","preventDefault","URL","state","url","axios","method","response","contentType","headers","toLowerCase","console","log","props","handler","data","handleChange","setState","target","value","id","onSubmit","this","type","placeholder","onChange","name","React","Component","Results","renderOnType","renderDataAsJson","renderDataAsHtml","renderDataAsText","renderDataAsNull","src","collapsed","expansionDepth","title","require","Header","App","handleResultsFromForm","results","className","About","Contact","Navbar","to","Router","path","exact","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.ce859674.chunk.js","sourcesContent":["import React from 'react'\nimport axios from 'axios'\nimport './Form.scss'\n\nexport const ContentType = {\n  JSON: 'JSON',\n  TEXT: 'TEXT',\n  HTML: 'HTML'\n}\n\nclass Form extends React.Component {\n  constructor() {\n    super()\n    this.state = {\n      url: null,\n    }\n  }\n\n\n  handleSubmit = async (e) => {\n    // queries the api\n    e.preventDefault();\n\n    const URL = this.state.url\n    const response = await axios({\n      url: URL,\n      method: 'GET'\n    })\n\n    let contentType = ContentType.TEXT\n\n    if (response.headers['content-type']) {\n      switch (response.headers['content-type'].toLowerCase()) {\n        case 'application/json': \n          contentType = ContentType.JSON;\n          break;\n        case 'text/html': \n          contentType = ContentType.HTML;\n          break;\n      }\n    }\n\n    console.log(response)\n    \n    this.props.handler(response.data, contentType);\n  }\n\n  handleChange = (e) => {\n    this.setState({\n      url: e.target.value\n    })\n  }\n\n  render() {\n    return (\n      <form id=\"Form\" onSubmit={this.handleSubmit}>\n        <input type=\"text\" id=\"formInput\" placeholder=\"Find Stuff...\" onChange={this.handleChange}></input>\n\n        <label>GET\n          <input type='radio' name='method2' value=\"GET\" />\n        </label>\n        <label>POST\n          <input type='radio' name='method2' value=\"POST\" />\n        </label>\n        <label>PUT\n          <input type='radio' name='method2' value=\"PUT\" />\n        </label>\n        <label>DELETE\n          <input type='radio' name='method2' value=\"DELETE\" />\n        </label>\n\n        <input type=\"submit\" value=\"Go!\" id=\"submitButton\" />\n      </form>\n    )\n  }\n}\n\nexport default Form","import './Results.scss'\nimport React from 'react'\nimport { ContentType } from '../Form'\nimport ReactJson from 'react-json-view'\n\nclass Results extends React.Component {\n\n  renderDataAsJson() {\n    return <ReactJson src={this.props.data} collapsed={this.props.expansionDepth} />\n  }\n  renderDataAsText() {\n    return <pre>{this.props.data}</pre>\n  }\n  renderDataAsHtml() {\n    return <iframe title=\"data\">{this.props.data}</iframe>\n  }\n  renderDataAsNull() {\n    return 'Unknown Data Type'\n  }\n\n  renderOnType = () => {\n    switch (this.props.type) {\n      case ContentType.JSON:\n        return this.renderDataAsJson();\n      case ContentType.HTML:\n        return this.renderDataAsHtml();\n      case ContentType.TEXT:\n        return this.renderDataAsText();\n      default:\n        return this.renderDataAsNull();\n    }\n  }\n\n  render() {\n    return (\n\n      <div id=\"Results\">\n        {this.renderOnType()}\n      </div>\n    )\n  }\n\n}\n\nexport default Results","const React = require('react')\nrequire('./Header.scss')\n\nconst Header = props => {\n  return (\n    <div id=\"Header\">\n      <h1>Mini Postman</h1>\n    </div>\n  )\n}\n\nexport default Header","import React from 'react';\nimport './App.scss'\nimport Form from '../Form'\nimport Results from '../Results'\nimport Header from '../Header'\n\nclass App extends React.Component {\n\n  constructor() {\n    super();\n    this.state = {\n      results: null,\n      type: null,\n      expansionDepth: 2\n      // ... more state? \n    }\n  }\n\n  handleResultsFromForm = (results, type) => {\n    this.setState({\n      results, type\n    })\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <Header />\n        <Form handler={this.handleResultsFromForm} />\n        <Results\n          data={this.state.results}\n          type={this.state.type}\n          expansionDepth={this.state.expansionDepth} />\n      </div>\n    );\n  }\n\n}\n\nexport default App;\n","const React = require('react')\n\nclass About extends React.Component {\n  render() {\n    return (\n      <div>\n        <p>Here you are in the about-us area</p>\n      </div>\n    )\n  }\n}\n\nexport default About","const React = require('react')\n\nclass Contact extends React.Component {\n  render() {\n    return (\n      <div>\n        <p>Here you are in the contact-us area</p>\n      </div>\n    )\n  }\n}\n\nexport default Contact","import React from 'react'\nimport { Link } from 'react-router-dom'\n\nclass Navbar extends React.Component{\n\n  render() {\n    return(\n      <div id=\"Navbar\">\n        <Link to=\"/\">Home</Link>\n        <Link to=\"/about\">About</Link>\n        <Link to=\"/contact\">Contact</Link>\n      </div>\n    )\n  }\n}\n\nexport default Navbar","import React from 'react'\nimport { BrowserRouter, Switch, Route } from 'react-router-dom'\nimport App from '../App'\nimport About from '../About'\nimport Contact from '../Contact'\nimport Navbar from '../Navbar'\n\n\nconst Router = () => {\n\n  return (\n    <BrowserRouter>\n\n      <Navbar />\n      <Switch>\n        <Route path=\"/\" exact>\n          <App />\n        </Route>\n        <Route path=\"/about\">\n          <About />\n        </Route>\n        <Route path=\"/contact\">\n          <Contact />\n        </Route>\n      </Switch>\n\n    </BrowserRouter>\n  )\n}\n\nexport default Router;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport Router from './components/Router';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<Router />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}