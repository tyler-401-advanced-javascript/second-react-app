{"version":3,"sources":["components/Form/index.js","components/Results/index.js","components/Header/index.js","components/conditionals/index.js","components/App/index.js","components/About/index.js","components/Contact/index.js","components/Navbar/index.js","components/History/index.js","components/Router/index.js","serviceWorker.js","index.js"],"names":["ContentType","Form","props","preFillForm","preFilledSeach","preFilledSearch","url","method","setState","selectedMethod","handleSubmit","e","preventDefault","state","getApiData","alert","handleChange","target","value","this","id","onSubmit","type","placeholder","onChange","name","ev","React","Component","Results","renderOnType","renderDataAsJson","renderDataAsHtml","renderDataAsText","renderDataAsNull","src","data","collapsed","expansionDepth","title","require","Header","If","condition","children","Unless","App","a","loading","axios","response","contentType","headers","cT","toLowerCase","split","console","log","updateHistory","handleResultsFromForm","results","resultCount","count","className","handler","About","Contact","Navbar","to","History","searchAgain","search","fillSearch","history","push","showDetails","index","detailView","searchHistory","map","i","key","onClick","withRouter","Router","s","prevState","searchNum","path","exact","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.5202d0c4.chunk.js","sourcesContent":["import React from 'react'\nimport './Form.scss'\n\nexport const ContentType = {\n  JSON: 'JSON',\n  TEXT: 'TEXT',\n  HTML: 'HTML'\n}\n\nclass Form extends React.Component {\n  constructor(props) {\n    super();\n    this.props = props;\n    this.state = {\n      url: props.preFilledSearch ? props.preFilledSearch.url : '',\n      selectedMethod: props.preFilledSearch ? props.preFilledSearch.method : ''\n    }\n    // if (props.preFilledSearch) {\n    //   this.handleSubmit();\n    // }\n  }\n\n  preFillForm = () => {\n    // if this.props has preFilledSearch on it, \n    // change the state accordingly\n    if (this.props.preFilledSeach == null) return\n\n    const { url, method } = this.props.preFilledSearch\n    this.setState({\n      url,\n      selectedMethod: method\n    })\n  }\n\n  handleSubmit = (e) => {\n    if (e) e.preventDefault();\n    if (!this.state.url) {\n      alert('URL is required')\n      return\n    }\n    \n    this.props.getApiData(this.state.url, this.state.method)\n  }\n\n  handleChange = (e) => {\n    this.setState({\n      url: e.target.value\n    })\n  }\n\n\n  render() {\n\n    // select the default method based on state.\n    //prefill the form as needed. \n\n    this.preFillForm();\n\n    return (\n      <form id=\"Form\" onSubmit={this.handleSubmit}>\n        <input\n          type=\"text\"\n          id=\"formInput\"\n          placeholder=\"Find Stuff...\"\n          value={this.state.url}\n          onChange={this.handleChange}></input>\n\n        <select name=\"method\" id=\"methodMenu\" onChange={(ev) => { this.setState({ selectedMethod: ev.target.value })}} value={this.state.selectedMethod}>\n          <option value=\"\">Select Method</option>\n          <option value=\"GET\" >GET</option>\n          <option value=\"POST\" >POST</option>\n          <option value=\"PUT\" >PUT</option>\n          <option value=\"DELETE\" >DELETE</option>\n        </select>\n        <input type=\"submit\" value=\"Go!\" id=\"submitButton\" />\n      </form>\n    )\n  }\n}\n\nexport default Form","import './Results.scss'\nimport React from 'react'\nimport { ContentType } from '../Form'\nimport ReactJson from 'react-json-view'\n\nclass Results extends React.Component {\n\n  renderDataAsJson() {\n    return <ReactJson src={this.props.data} collapsed={this.props.expansionDepth} />\n  }\n  renderDataAsText() {\n    return <pre>{this.props.data}</pre>\n  }\n  renderDataAsHtml() {\n    return <iframe title=\"data-mon\">{this.props.data}</iframe>\n  }\n  renderDataAsNull() {\n    return 'Unknown Data Type'\n  }\n\n  renderOnType = () => {\n    switch (this.props.type) {\n      case ContentType.JSON:\n        return this.renderDataAsJson();\n      case ContentType.HTML:\n        return this.renderDataAsHtml();\n      case ContentType.TEXT:\n        return this.renderDataAsText();\n      default:\n        return this.renderDataAsNull();\n    }\n  }\n\n  render() {\n    return (\n\n      <div id=\"Results\">\n        {this.renderOnType()}\n      </div>\n    )\n  }\n\n}\n\nexport default Results","const React = require('react')\nrequire('./Header.scss')\n\nconst Header = props => {\n  return (\n    <div id=\"Header\">\n      <h1>Mini Postman</h1>\n    </div>\n  )\n}\n\nexport default Header","export const If = props => {\n  return props.condition ? props.children : null;\n}\n\nexport const Unless = props => !props.condition ? props.children : null;","import React from 'react';\nimport './App.scss'\nimport Form, { ContentType } from '../Form'\nimport Results from '../Results'\nimport Header from '../Header'\nimport { If, Unless } from '../conditionals';\nimport axios from 'axios'\n\n\nclass App extends React.Component {\n\n  constructor() {\n    super();\n    this.state = {\n      results: null,\n      type: null,\n      resultCount: null,\n      expansionDepth: 2,\n      loading: false\n      // ... more state? \n    }\n  }\n\n  getApiData = async (url, method) => {\n    this.setState({ loading: true })\n    const response = await axios({\n      url, method\n    })\n    this.setState({ loading: false })\n\n    let contentType = ContentType.TEXT\n\n    if (response.headers['content-type']) {\n      const cT = response.headers['content-type'].toLowerCase().split(';')[0]\n      console.log(cT);\n      // eslint-disable-next-line default-case\n      switch (cT) {\n        case 'application/json':\n          contentType = ContentType.JSON;\n          break;\n        case 'text/html':\n          contentType = ContentType.HTML;\n          break;\n      }\n    }\n\n    //update the history\n    this.props.updateHistory(url, method, response.data)\n\n    this.handleResultsFromForm(response.data, contentType);\n\n  }\n\n  handleResultsFromForm = (results, type) => {\n    this.setState({\n      results, type, resultCount: results.count\n    })\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <Header />\n        <Form\n          handler={this.handleResultsFromForm}\n\n          //send the prefilled seach down the heirarchy. \n          preFilledSearch={this.props.preFilledSearch}\n          getApiData={this.getApiData} />\n        <If condition={this.state.results !== null}>\n          Number of results: <div id=\"count\" >{this.state.resultCount}</div>\n          <Results\n            data={this.state.results}\n            type={this.state.type}\n            expansionDepth={this.state.expansionDepth} />\n        </If>\n        <Unless condition={this.state.results !== null}>\n          <div>{this.state.loading ? 'Loading...' : 'There is no data!'}</div>\n        </Unless>\n      </div>\n    );\n  }\n\n}\n\nexport default App;\n","const React = require('react')\n\nclass About extends React.Component {\n  render() {\n    return (\n      <div>\n        <p>Here you are in the about-us area</p>\n      </div>\n    )\n  }\n}\n\nexport default About","const React = require('react')\n\nclass Contact extends React.Component {\n  render() {\n    return (\n      <div>\n        <p>Here you are in the contact-us area</p>\n      </div>\n    )\n  }\n}\n\nexport default Contact","import React from 'react'\nimport { Link } from 'react-router-dom'\nimport './Navbar.scss'\n\nclass Navbar extends React.Component{\n\n  render() {\n    return(\n      <div id=\"Navbar\">\n        <Link to=\"/\">Home</Link>\n        <Link to=\"/about\">About</Link>\n        <Link to=\"/contact\">Contact</Link>\n        <Link to=\"/history\">History</Link>\n      </div>\n    )\n  }\n}\n\nexport default Navbar","import React from 'react';\nimport { withRouter } from 'react-router-dom';\nimport Header from '../Header'\nimport { If } from '../conditionals'\n// import { Link } from 'react-router-dom'\nimport './History.scss'\nimport '../App/App.scss'\n\n\nclass History extends React.Component {\n  constructor(props) {\n    super();\n    this.state = {\n      detailView: null\n    }\n  }\n\n  searchAgain = (search) => {\n    this.props.fillSearch(search);\n\n    //redirect the person.\n    this.props.history.push('/');\n  }\n\n\n  showDetails = (index) => {\n    console.log(index)\n    this.setState({\n      detailView: index\n    })\n\n  }\n\n  render() {\n    return (\n      <div id='History' className=\"App\">\n        <Header />\n        <ul>\n          {this.props.searchHistory.map((search, i) => {\n            return (\n              <li\n                className=\"historyResult\"\n                key={i}\n                onClick={() => this.showDetails(i)}\n              >URL: {search.url}, Method: {search.method}\n                <If condition={this.state.detailView === i}>\n                  <ul>\n                    <li className=\"historyDetails\">\n                      details go here! <br />\n                      {search.url} <br />\n                      {search.method}\n                      <button\n                        onClick={() => this.searchAgain({ url: search.url, method: search.method })}\n                      >Make Request Again</button>\n                    </li>\n                  </ul>\n                </If>\n              </li>\n            )\n          })}\n        </ul>\n      </div>\n    )\n  }\n\n\n}\n\nexport default withRouter(History);","import React from 'react'\nimport { BrowserRouter, Switch, Route } from 'react-router-dom'\nimport App from '../App'\nimport About from '../About'\nimport Contact from '../Contact'\nimport Navbar from '../Navbar'\nimport History from '../History'\n\n\nclass Router extends React.Component {\n  constructor() {\n    super()\n    this.state = {\n      preFilledSearch: null,\n      searchNum: 0,\n      history: []\n    }\n  }\n\n  fillSearch = (s) => {\n    this.setState((prevState) => ({\n      preFilledSearch: s,\n      searchNum: prevState.searchNum + 1\n    }))\n  }\n\n  updateHistory = (url, method, data) => {\n    this.setState({\n      history: [...this.state.history, {url, method, data}]\n    })\n  }\n\n  render() {\n    return (\n      <BrowserRouter>\n\n        <Navbar />\n        <Switch>\n          <Route path=\"/\" exact>\n            <App \n            preFilledSearch={this.state.preFilledSearch} \n            key={this.state.searchNum} \n            updateHistory={this.updateHistory}/>\n          </Route>\n          <Route path=\"/about\">\n            <About />\n          </Route>\n          <Route path=\"/contact\">\n            <Contact />\n          </Route>\n          <Route path=\"/history\">\n            <History \n            fillSearch={this.fillSearch}\n            searchHistory={this.state.history}/>\n          </Route>\n        </Switch>\n\n      </BrowserRouter>\n    )\n  }\n}\n\nexport default Router;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport Router from './components/Router';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<Router />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}